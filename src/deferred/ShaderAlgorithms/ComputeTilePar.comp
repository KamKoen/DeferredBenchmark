#version 430



//zBuffer
layout(std430, binding = 1)  buffer zBuf
{
	float zB[]; //min max
};

//speichert offset und Anzahl an Lichtern, um die Lichter des Tiles im indexBuffer zu finden, da sie 
//pro Tile im anderen Buffer nacheinander auftauchen
layout(std430, binding = 4)  buffer infB
{
	int info[];
};
//speichert alle Indexe der auftretenden Lichter
layout(std430, binding = 5)  buffer indB
{
	int indexB[];
};

//das Gleiche wie oben, nur betreffend einer anderen Tilegröße
//nötig für mehrfache Unterteilung
layout(std430, binding = 6)  buffer infSubB
{
	int infoSub[];
};

layout(std430, binding = 7)  buffer indSubB
{
	int indexSub[];
};
//das Gleiche wie oben, nur betreffend einer anderen Tilegröße
//nötig für mehrfache Unterteilung
layout(std430, binding = 2)  buffer infSubB2
{
	int infoSub2[];
};

layout(std430, binding = 3)  buffer indSubB2
{
	int indexSub2[];
};


uniform int zCulling = 0;

uniform int MAX_LIGHT_PER_TILE;
uniform int width;
uniform int height;

uniform int tileWidth;//erste Unterteilung
uniform int tileHeight;

uniform int tileWidthSub; //mögliche zweite Unterteilung
uniform int tileHeightSub;

uniform int tileWidthSub2; //mögliche zweite Unterteilung
uniform int tileHeightSub2;

uniform float C;
uniform float D;

uniform int mode;

uniform mat4 invProj;
uniform mat4 view;

struct PointLight{

	vec4 position;	//.w is rad
	vec4 ambient;	//.w ist quad
	vec4 diff;		//.w ist lin
	vec4 specular;	//.w ist const
};

layout (std140) uniform pl{
	
	PointLight pLight[1000];

};

shared uint count;	
uniform int LIGHT_MAX;

layout(local_size_x = 256,local_size_y = 1,local_size_z = 1) in; 


vec4 createPlaneEq(vec4 a, vec4 b)
{


	vec4 n;
	
	n.xyz = normalize(cross(a.xyz, b.xyz));
	
	n.w = 0;
	
	return n;
	
}


float getSignedDistance(vec4 eqn, vec3 p)
{

	vec4 ret = view * vec4(p,1.0);
	
	float f = dot(eqn, ret);
	
	return f;

}


float calcViewZ(float z)
{
	float nDcz = z * 2.0 - 1.0;
	
	float res = -D / (nDcz + C);


	return res;
}





void createFrustumForTileGeneral(int usedTileWidth, int usedTileHeight, int destBuffer)
{

	
	
	
	
	uint cury = gl_WorkGroupID.y;
	uint curx = gl_WorkGroupID.x;
	
	int tileColumn = width/usedTileWidth;
	
	float x = curx * usedTileWidth;
	float x2 = x + usedTileWidth -1;
	if(x2 > width-1) x2 = width-1;
	
	float y = cury * usedTileHeight;
	float y2 = y + usedTileHeight - 1;
	if(y2 > height-1) y2 = height-1;
	
	vec4 frustum[4];
	vec4 frustumEq[4];
	
	frustum[0] = vec4(
					2.0 * (x / width) - 1.0,
					2.0 * (y / height) - 1.0,
					1.0,
					1.0
					);
					
	frustum[1] = vec4(
					2.0 * (x2 / width) - 1.0,
					2.0 * (y / height) - 1.0,
					1.0,
					1.0
					);
					
	frustum[2] = vec4(
					2.0 * (x2 / width) - 1.0,
					2.0 * (y2 / height) - 1.0,
					1.0,
					1.0
					);
					
	frustum[3] = vec4(
					2.0 * (x / width) - 1.0,
					2.0 * (y2 / height) - 1.0,
					1.0,
					1.0
					);				
	
	
	for(int i = 0; i < 4; i++)
	{
			
		frustum[i] = invProj * frustum[i];
		frustum[i] /= frustum[i].w;
			
	}
	
	
	frustumEq[0] = createPlaneEq(frustum[0], frustum[1]);
	frustumEq[1] = createPlaneEq(frustum[1], frustum[2]);
	frustumEq[2] = createPlaneEq(frustum[2], frustum[3]);
	frustumEq[3] = createPlaneEq(frustum[3], frustum[0]);
	

	
	
	
	
	
	
	int offset = int(cury *( (tileColumn) * MAX_LIGHT_PER_TILE) 
			+ curx * MAX_LIGHT_PER_TILE);
	
	for(int i = 0; i < 4; i++)
	{
		int j = i * 256 + int(gl_LocalInvocationID.x);
		if( j > LIGHT_MAX-1) break;
		
		if	(
			
			(getSignedDistance(frustumEq[0], pLight[j].position.xyz) < pLight[j].position.w) &&
			(getSignedDistance(frustumEq[1], pLight[j].position.xyz) < pLight[j].position.w) &&
			(getSignedDistance(frustumEq[2], pLight[j].position.xyz) < pLight[j].position.w) &&
			(getSignedDistance(frustumEq[3], pLight[j].position.xyz) < pLight[j].position.w) 
			&& ((view * vec4(pLight[j].position.xyz,1)).z <= (0 + pLight[j].position.w))
			)
			{
				
				if(zCulling == 1 && destBuffer==0)
				{
					
					int offsetZB = int(cury*(tileColumn) * 2 + curx * 2);
					
					if	(
						(view * vec4(pLight[j].position.xyz,1)).z <= (zB[offsetZB] + pLight[j].position.w)&&
						(view * vec4(pLight[j].position.xyz,1)).z >= (zB[offsetZB+1] - pLight[j].position.w)
						)
					{
						
						int tempCount = int(atomicAdd(count,1));
						barrier();
						
						indexB[offset + tempCount] = j;
						
						
					}
					
				
				
				}
				else
				{
				
					
					int tempCount = int(atomicAdd(count,1));
					barrier();					
					if(destBuffer==0)indexB[offset + tempCount] = j;
					else if(destBuffer==1)indexSub[offset + tempCount] = j;
					else if(destBuffer==2)indexSub2[offset + tempCount] = j;		
					
				
				}
			}
		
		
		
	
	
	}
	
	groupMemoryBarrier();
	
	if(count > 0)
	{
		if(destBuffer==0)
		{			 	
			info[(curx + cury * (tileColumn)) * 2] = offset; //offset
			info[(curx + cury * (tileColumn)) * 2 + 1] = int(count); //
		}
		else if(destBuffer == 1)
		{
			infoSub[(curx + cury * (tileColumn)) * 2] = offset; //offset
			infoSub[(curx + cury * (tileColumn)) * 2 + 1] = int(count); //
		}
		else if(destBuffer == 2)
		{
			infoSub2[(curx + cury * (tileColumn)) * 2] = offset; //offset
			infoSub2[(curx + cury * (tileColumn)) * 2 + 1] = int(count); //
		}
	
	}
	
	else
	{
	
		if(destBuffer==0)
		{			 	
			info[(curx + cury * (tileColumn)) * 2] = -1;
			info[(curx + cury * (tileColumn)) * 2 + 1] = -1;
		}
		else if(destBuffer == 1)
		{
			infoSub[(curx + cury * (tileColumn)) * 2] = -1;
			infoSub[(curx + cury * (tileColumn)) * 2 + 1] = -1;
		}
		else if(destBuffer == 2)
		{
			infoSub2[(curx + cury * (tileColumn)) * 2] = offset; //offset
			infoSub2[(curx + cury * (tileColumn)) * 2 + 1] = int(count); //
		}
		
	
	}
	

}






void createFrustumForTileSubdivisionAfterFormerDivision(
				int curSubTileWidth, int curSubTileHeight, 
				int formerTileWidth, int formerTileHeight, 
				int sourceBuffer, int destBuffer)
{
	
	uint cury = gl_WorkGroupID.y;
	uint curx = gl_WorkGroupID.x;
	
	int formerTileColumn = width / formerTileWidth;
	
	int subTileColumn = width/curSubTileWidth;

	float x = curx * curSubTileWidth;
	float x2 = x + curSubTileWidth - 1;
	if(x2 > width-1) x2 = width-1;
	
	float y = cury * curSubTileHeight;
	float y2 = y + curSubTileHeight - 1;
	if(y2 > height-1) y2 = height-1;
	
	
	
	//what tile
	
	int curySub = int(y2 / formerTileHeight);
	int curxSub = int(x2 / formerTileWidth);
	
	int offsetSub = -1;
	int countSub = -1;
	
	if(sourceBuffer==0)
	{
		offsetSub = info[(curxSub + curySub * (formerTileColumn)) * 2];
		countSub = info[(curxSub + curySub * (formerTileColumn)) * 2 + 1];
	}
	if(sourceBuffer==1)
	{
		offsetSub = infoSub[(curxSub + curySub * (formerTileColumn)) * 2];
		countSub = infoSub[(curxSub + curySub * (formerTileColumn)) * 2 + 1];
	}
	if(sourceBuffer==2)
	{
		offsetSub = infoSub2[(curxSub + curySub * (formerTileColumn)) * 2];
		countSub = infoSub2[(curxSub + curySub * (formerTileColumn)) * 2 + 1];
	}
	
	
	
	
	
	
	
	//keine Lichter im größeren Tile => keine Lichter im kleinerem Tile
	if(offsetSub < 0) 
	{
		
		if(destBuffer==1)
		{
			infoSub[(curx + cury * (subTileColumn)) * 2] = -1;
			infoSub[(curx + cury * (subTileColumn)) * 2 + 1] = -1;
		}
		
		if(destBuffer==2)
		{
			infoSub2[(curx + cury * (subTileColumn)) * 2] = -1;
			infoSub2[(curx + cury * (subTileColumn)) * 2 + 1] = -1;
		}
	}
	
	
	else 
	{
		
		
		
		vec4 frustum[4];
		vec4 frustumEq[4];
		
		frustum[0] = vec4(
						2.0 * (x / width) - 1.0,
						2.0 * (y / height) - 1.0,
						1.0,
						1.0
						);
						
		frustum[1] = vec4(
						2.0 * (x2 / width) - 1.0,
						2.0 * (y / height) - 1.0,
						1.0,
						1.0
						);
						
		frustum[2] = vec4(
						2.0 * (x2 / width) - 1.0,
						2.0 * (y2 / height) - 1.0,
						1.0,
						1.0
						);
						
		frustum[3] = vec4(
						2.0 * (x / width) - 1.0,
						2.0 * (y2 / height) - 1.0,
						1.0,
						1.0
						);				
		
		
		for(int i = 0; i < 4; i++)
		{
				
			frustum[i] = invProj * frustum[i];
			frustum[i] /= frustum[i].w;
				
		}
		
		
		frustumEq[0] = createPlaneEq(frustum[0], frustum[1]);
		frustumEq[1] = createPlaneEq(frustum[1], frustum[2]);
		frustumEq[2] = createPlaneEq(frustum[2], frustum[3]);
		frustumEq[3] = createPlaneEq(frustum[3], frustum[0]);
		
	//	int count = 0;
		
		
		
		
		int i = 0;
		
		int offset = int(cury *( (subTileColumn) * MAX_LIGHT_PER_TILE) 
				+ curx * MAX_LIGHT_PER_TILE);
		
		for(int j = 0; j < countSub; j++)
		{
		
			int t = j * 256 + int(gl_LocalInvocationID.x);
			if(t >= countSub) break;
			i = 0;
			
			if(sourceBuffer == 0) i = indexB[offsetSub + t]; 
			else if(sourceBuffer == 1) i = indexSub[offsetSub + t]; 
			else if(sourceBuffer == 2) i = indexSub2[offsetSub + t];  
			
			
			
			if	(
				
				(getSignedDistance(frustumEq[0], pLight[i].position.xyz) < pLight[i].position.w) &&
				(getSignedDistance(frustumEq[1], pLight[i].position.xyz) < pLight[i].position.w) &&
				(getSignedDistance(frustumEq[2], pLight[i].position.xyz) < pLight[i].position.w) &&
				(getSignedDistance(frustumEq[3], pLight[i].position.xyz) < pLight[i].position.w)  
				&& ((view * vec4(pLight[i].position.xyz,1)).z <= (0 + pLight[i].position.w))
				)
				
				if(zCulling == 1 )
				{
					int offsetZB = int(cury*(subTileColumn) * 2 + curx * 2);
					
					if	(
						(view * vec4(pLight[i].position.xyz,1)).z <= (zB[offsetZB] + pLight[i].position.w)&&
						(view * vec4(pLight[i].position.xyz,1)).z >= (zB[offsetZB+1] - pLight[i].position.w)
						)
					{
						
						int tempCount = int(atomicAdd(count,1));
						barrier();
						if(destBuffer == 0) indexB[offset + tempCount] = i;
						else if(destBuffer == 1) indexSub[offset + tempCount] = i;
						else if(destBuffer == 2) indexSub2[offset + tempCount] = i;
						
					
					}
					
				
				
				}
				else
				{
				
					int tempCount = int(atomicAdd(count,1));
					barrier();
					if(destBuffer==0)indexB[offset + tempCount] = i;
					else if(destBuffer==1)indexSub[offset + tempCount] = i;		
					else if(destBuffer==2)indexSub2[offset + tempCount] = i;		
					
					
				}
			
			
			
		
		
		}
		
	
		if(count > 0)
		{
		
			if(destBuffer==0)
			{				 	
				info[(curx + cury * (subTileColumn)) * 2] = offset; //offset
				info[(curx + cury * (subTileColumn)) * 2 + 1] = int(count); //
			}
		
			else if(destBuffer==1)
			{				 	
				infoSub[(curx + cury * (subTileColumn)) * 2] = offset; //offset
				infoSub[(curx + cury * (subTileColumn)) * 2 + 1] = int(count); //
			}
			else if(destBuffer==2)
			{				 	
				infoSub2[(curx + cury * (subTileColumn)) * 2] = offset; //offset
				infoSub2[(curx + cury * (subTileColumn)) * 2 + 1] = int(count); //
			}
		}
		
		else
		{
			if(destBuffer==0)
			{		
				info[(curx + cury * (subTileColumn)) * 2] = -1;
				info[(curx + cury * (subTileColumn)) * 2 + 1] = -1;
			}
			else if(destBuffer==1)
			{		
				infoSub2[(curx + cury * (subTileColumn)) * 2] = -1;
				infoSub2[(curx + cury * (subTileColumn)) * 2 + 1] = -1;
			}
			else if(destBuffer == 2)
			{	
				infoSub2[(curx + cury * (subTileColumn)) * 2] = -1;
				infoSub2[(curx + cury * (subTileColumn)) * 2 + 1] = -1;
			}
		}
	}

}


void main()
{


	atomicExchange(count,0);
	
	barrier();

	if(mode == 0)
	{
		
		createFrustumForTileGeneral(tileWidth, tileHeight,0);
		
	}
	
	
	
	
	
	//first subdivision
	else if (mode == 1)
	{
		createFrustumForTileGeneral(tileWidthSub, tileHeightSub,1);
				
	}
	
	
	//second subdivision after first
	else if (mode == 2)
	{
		createFrustumForTileSubdivisionAfterFormerDivision(
		tileWidthSub2, tileHeightSub2, tileWidthSub, tileHeightSub, 1,2);
	}
	//read from second subdivision
	else if (mode == 3)
	{
		
		createFrustumForTileSubdivisionAfterFormerDivision(
		tileWidth, tileHeight, tileWidthSub2, tileHeightSub2, 2,0);
	}
	
	
	
	
	// read from first subdivision
	else if (mode == 4)
	{
	
	   
	    createFrustumForTileSubdivisionAfterFormerDivision(
		tileWidth, tileHeight, tileWidthSub, tileHeightSub, 1,0);
	
	}
	
	//first subdivision with second's width/height
	else if (mode == 5)
	{
		
		createFrustumForTileGeneral(tileWidthSub2, tileHeightSub2,2);
	}
	
	

}







